/***********************************************
* GENERATED BY ZEBBLE
***********************************************/

#region UI.Modules.MainTabs
namespace UI.Modules
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Framework;

    public class MainTabs : Zebble.Tabs
    {
        public override async Task OnInitializing()
        {
            await base.OnInitializing();

            await Add(new Tabs.Tab<Pages.Page1>()
            .Set(x => x.Label.Text = "Page 1")
            .Set(x => x.Icon.Path = "Images/Icons/Contacts.png"));

            await Add(new Tabs.Tab<Pages.Page2>()
            .Set(x => x.Label.Text = "Page 2")
            .Set(x => x.Icon.Path = "Images/Icons/Types.png"));

            await Add(new Tabs.Tab<Pages.Page3>()
            .Set(x => x.Label.Text = "Page 3")
            .Set(x => x.Icon.Path = "Images/Icons/Video.png"));

            await Add(new Tabs.Tab<Pages.Page4>()
            .Set(x => x.Label.Text = "Page 4")
            .Set(x => x.Icon.Path = "Images/Icons/Map.png"));

            await Add(new Tabs.Tab<Pages.Page5>()
            .Set(x => x.Label.Text = "Page 5")
            .Set(x => x.Icon.Path = "Images/Icons/Settings.png"));
        }
    }
}
#endregion

#region UI.Modules.ContactForm
namespace UI.Modules
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Framework;

    public partial class ContactForm : Stack
    {
        public Button SaveButton;
        public TextView HeaderTitle;
        public FormField<TextInput> Name, Email, Tel, Notes;
        public FormField<Slider> Number;
        public FormField<DatePicker> DateOfBirth;
        public FormField<TimePicker> TimeOfBirth;
        public FormField<ItemPicker> Type, Types;
        public FormField<FilePicker> Photo;
        public FormField<Switch> IsNice;

        async Task InitializeComponents()
        {
            await Page.GetNavBar().AddButton(ButtonLocation.Right, SaveButton = new Button { Id = "SaveButton", Text = "Save", CssClass = "navbar-button" }
            .On(x => x.Tapped, SaveButtonTapped));

            await Add(HeaderTitle = new TextView
            {
                Id = "HeaderTitle",
                Text = "Contact Details",
                CssClass = "module-header-title"
            }
            );

            await Add(Name = new FormField<TextInput> { Id = "Name", LabelText = "Name", Mandatory = true });

            await Add(Email = new FormField<TextInput> { Id = "Email", LabelText = "Email" });

            await Add(Number = new FormField<Slider> { Id = "Number", LabelText = "Number", Mandatory = true }
            .Set(x => x.Control.MinValue = 0)
            .Set(x => x.Control.MaxValue = 20));

            await Add(Tel = new FormField<TextInput> { Id = "Tel", LabelText = "Tel" });

            await Add(Notes = new FormField<TextInput> { Id = "Notes", LabelText = "Notes" }
            .Set(x => x.Control.Lines = 5));

            await Add(DateOfBirth = new FormField<DatePicker> { Id = "DateOfBirth", LabelText = "Date of birth" }
            .Set(x => x.Control.AllowNull = true));

            await Add(TimeOfBirth = new FormField<TimePicker> { Id = "TimeOfBirth", LabelText = "Time of birth" }
            .Set(x => x.Control.AllowNull = true));

            await Add(Type = new FormField<ItemPicker> { Id = "Type", LabelText = "Type" }
            .Set(x => x.Control.AllowNull = true)
            .Set(x => x.Control.DataSource = (Database.GetList<ContactType>())));

            await Add(Types = new FormField<ItemPicker> { Id = "Types", LabelText = "Types" }
            .Set(x => x.Control.MultiSelect = true)
            .Set(x => x.Control.DataSource = (Database.GetList<ContactType>())));

            await Add(Photo = new FormField<FilePicker> { Id = "Photo", LabelText = "Photo" });

            await Add(IsNice = new FormField<Switch> { Id = "IsNice", LabelText = "Is nice" });
        }
    }
}
#endregion

#region UI.Modules.ContactsList
namespace UI.Modules
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Framework;

    public partial class ContactsList : Stack
    {
        public ImageView AddButton;
        public TextView HeaderTitle, HeaderIntro;
        public Stack ButtonsContainer;
        public Button ReloadButton;
        public ListView<Contact, Row> List;

        async Task InitializeComponents()
        {
            CssClass = "standard-list";

            await Page.GetNavBar().AddButton(ButtonLocation.Right, AddButton = new ImageView
            {
                Id = "AddButton",
                CssClass = "navbar-button",
                Path = "Images/Icons/White-Add.png"
            }
            .On(x => x.Tapped, () =>
            {
                try { return Nav.Forward<Pages.Page1Enter>(); }
                catch (Exception ex) { return Alert.Show(ex.Message); }
            }
            ));

            await Add(HeaderTitle = new TextView
            {
                Id = "HeaderTitle",
                Text = "Contacts",
                CssClass = "module-header-title"
            }
            );

            await Add(HeaderIntro = new TextView
            {
                Id = "HeaderIntro",
                Text = "This module allows you to see all your contacts, interact with them and generally have a lot of fun with it. Am I long enough now?",
                CssClass = "header-intro"
            }
            );

            await Add(ButtonsContainer = new Stack
            {
                Id = "ButtonsContainer",
                Direction = RepeatDirection.Horizontal,
                CssClass = "top-buttons-row"
            }
            );

            await ButtonsContainer.Add(ReloadButton = new Button { Id = "ReloadButton", Text = "Reload" }
            .On(x => x.Tapped, ReloadButtonTapped));

            await Add(List = new ListView<Contact, Row>
            {
                Id = "List",
                LazyLoad = true,
                EmptyText = "Empty list",
                DataSource = Items,
            }
            );
        }

        public partial class Row : ListViewItem<Contact>
        {
            public ImageView PhotoImage, ViewButton;
            public Stack NameColumn;
            public TextView Name, ContactDetails;
            public Button DeleteButton;

            async Task InitializeComponents()
            {
                AutoFlash = true;

                Tapped.Handle(ViewButtonTapped);

                await Add(PhotoImage = new ImageView { Id = "PhotoImage", CssClass = "icon", Path = Item.Photo.Path }
                .Set(x => x.Style.Visible = (Module.ShowPhotoColumn && Item.Photo.HasValue()))
                .Set(x => x.Style.Ignored = !(Module.ShowPhotoColumn)));

                await Add(NameColumn = new Stack { Id = "NameColumn" });

                await NameColumn.Add(Name = new TextView { Id = "Name", CssClass = "title", Text = Item.Name });

                await NameColumn.Add(ContactDetails = new TextView
                {
                    Id = "ContactDetails",
                    Text = (new[]{Item.Email , Item.Tel}.Trim().ToString(", "))
                }
                );

                await Add(ViewButton = new ImageView
                {
                    Id = "ViewButton",
                    CssClass = "view-row",
                    Path = "Images/Icons/Arrow-Right.png",
                    AutoFlash = true
                }

                .On(x => x.Tapped, ViewButtonTapped));

                await SlideIn.Add(DeleteButton = new Button { Id = "DeleteButton", Text = "Delete", CssClass = "delete-button" }
                .On(x => x.Tapped, DeleteButtonTapped));
            }
            }}
        }
        #endregion

#region UI.Modules.Types_ContactFormFormInfo
namespace UI.Modules
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Framework;

    public partial class Types_ContactFormFormInfo : Stack
    {
        public FormField<ItemPicker> ContactType;

        async Task InitializeComponents()
        {
            await Add(ContactType = new FormField<ItemPicker> { Id = "ContactType", LabelText = "Contact type" }
            .Set(x => x.Control.AllowNull = true)
            .Set(x => x.Control.DataSource = (Database.GetList<ContactType>())));
        }
    }
}
#endregion

#region UI.Modules.MainMenu
namespace UI.Modules
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Framework;

    public partial class MainMenu : Canvas
    {
        public Stack Body, ButtonsContainer, Items;
        public ImageView LogoImage;
        public IconButton Page1, Page2, Page3, Contact;

        async Task InitializeComponents()
        {
            await Add(Body = new Stack { Id = "Body" });

            await Body.Add(ButtonsContainer = new Stack
            {
                Id = "ButtonsContainer",
                Direction = RepeatDirection.Horizontal,
                CssClass = "top-buttons-row"
            }
            );

            await ButtonsContainer.Add(LogoImage = new ImageView { Id = "LogoImage", Path = "/Images/Logo.png" });

            await Body.Add(Items = new Stack { Id = "Items" });

            await Items.Add(Page1 = new IconButton { Id = "Page1", Text = "Page 1", IconPath = "Images/Icons/contacts.png" }
            .On(x => x.Tapped, Page1Tapped));

            await Items.Add(Page2 = new IconButton { Id = "Page2", Text = "Page 2", IconPath = "Images/Icons/Types.png" }
            .On(x => x.Tapped, Page2Tapped));

            await Items.Add(Page3 = new IconButton { Id = "Page3", Text = "Page 3", IconPath = "Images/Icons/Settings.png" }
            .On(x => x.Tapped, Page3Tapped));

            await Items.Add(Contact = new IconButton { Id = "Contact", Text = "Page 4", IconPath = "Images/Icons/Map.png" }
            .On(x => x.Tapped, ContactTapped));
        }
    }
}
#endregion

#region UI.Pages.Page1
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Framework;

    public partial class Page1 : Templates.Default
    {
        public Modules.ContactsList ContactsList;

        async Task InitializeComponents()
        {
            Data["TopMenu"] = "MainMenu";
            Title = "Page 1";

            await Body.Add(ContactsList = new Modules.ContactsList { Id = "ContactsList" });
        }
    }
}
#endregion

#region UI.Pages.Page2
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Framework;

    public partial class Page2 : Templates.Default
    {
        async Task InitializeComponents()
        {
            Data["TopMenu"] = "MainMenu";
            Title = "Page 2";
        }
    }
}
#endregion

#region UI.Pages.Page3
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Framework;

    public partial class Page3 : Templates.Default
    {
        async Task InitializeComponents()
        {
            Data["TopMenu"] = "MainMenu";
            Title = "Page 3";
        }
    }
}
#endregion

#region UI.Pages.Page4
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Framework;

    public partial class Page4 : Templates.Default
    {
        async Task InitializeComponents()
        {
            Data["TopMenu"] = "MainMenu";
            Title = "Page 4";
        }
    }
}
#endregion

#region UI.Pages.Page5
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Framework;

    public partial class Page5 : Templates.Default
    {
        async Task InitializeComponents()
        {
            Data["TopMenu"] = "MainMenu";
            Title = "About us";

            await Body.Add(new TextView { Text = "Hello world!" });
        }
    }
}
#endregion

#region UI.Pages.Page1Enter
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Framework;

    public partial class Page1Enter : Templates.Default
    {
        public LazyLoader ContactFormLoader;
        public Modules.ContactForm ContactForm;

        async Task InitializeComponents()
        {
            Data["TopMenu"] = "MainMenu";
            Title = "Contact details";

            await Body.Add(ContactFormLoader = new LazyLoader { Id = "ContactFormLoader" });

            await ContactFormLoader.Add(ContactForm = new Modules.ContactForm { Id = "ContactForm" });
        }
    }
}
#endregion

namespace UI
{
    partial class StartUp
    {
        // Hashed content of all resources
        public override string GetResourcesVersion() => "4fJuBivs2Yzz09vGypDeOtwvZXI";
    }
}
